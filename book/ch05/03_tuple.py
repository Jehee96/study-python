# 5.2) 튜플
# 리스트(list)와 튜플(tuple)은 사전에서 각각 '목록', 'N개의 요소로 된 집합'으로 나온다.
# 차이점이라 하면 리스트는 데이터 변경이 가능하지만, 튜플은 변경이 불가능하다.
# ex) a[2] = 3과 같이 참조 연산을 통해 특정 요소에 접근해 데이터를 변경하는 일이 리스트는 가능, 튜플은 불가능하다.
# sort() 메소드를 이용해 리스트는 요소의 순서를 정렬하지만 튜플은 변경이 불가능하므로 해당 메소드가 아예 제공되지 않는다.

# 리스트의 용도 = 이름 그대로 목록 형식의 데이터를 다루는데 적합함.
# 튜플의 용도 = 위경도 좌표나 RGB 색상처럼 작은 규모의 자료 구조를 구성하기에 적합함.

# 튜플의 기본적인 용법, 괄호 '('와 )' 이용.
a = (1, 2, 3)
print(a)  # >> (1, 2, 3)
print(type(a))  # >> <calss 'tuple'>

# 괄호를 생략해도 튜플이 만들어진다.
a = 4, 5, 6
print(a)  # >> (4, 5, 6)
print(type(a))  # >> <class 'tuple'>

# 요소가 하나인 튜플을 정의할 때는 요소 뒤에 콤마(,)를 반드시 넣어줘야 한다.
# ex) a를 그냥 정수로 받아들임. 
a = (1)
print(a)  # >> 1
print(type(a))  # >> <class 'int'>

# ex) 의도하는 튜플을 제대로 정의함.
a = (1, )
print(a)  # >> (1, )
print(type(a))  # >> <class 'tuple'>

b = (27, )
print(b)  # >> (27, )
print(type(b))  # >> <class 'tuple'>

# 튜플도 리스트와 문자열처럼 '순서열 자료형'이다.
# 따라서 대괄호를 이용한 참조 연산과 슬라이싱, 튜플간 결합 등의 연산이 가능하다.
a = (1, 2, 3, 4, 5, 6)
print(a[:3])   # >> (1, 2, 3)
print(a[:4])   # >> (1, 2, 3, 4)
print(a[3:6])  # >> (4, 5, 6)

# + 연산자를 통한 튜플간의 결합 예제
a = (1, 2, 3)
b = (4, 5, 6)
c = a + b
print(a)  # >> (1, 2, 3)
print(b)  # >> (4, 5, 6)
print(c)  # >> (1, 2, 3, 4, 5, 6)

# 튜플은 참조 연산은 가능하지만 '참조 연산'을 이용한 '요소 변경'은 허용되지 않는다.
a = (1, 2, 3)
print(a[0])  # >> 1

# 튜플 내의 요소를 변경하려는 시도가 일어나면 파이썬이 오류 메시지를 출력한다.
# a[0] = 7
# Traceback (most recent call last):
#   File "c:/Workstation/JJ/study-python/ch05/03_tuple.py", line 53, in <module>
#     a[0] = 7
# TypeError: 'tuple' object does not support item assignment

# 문자열, 리스트와 마찬가지로 튜플의 길이를 잴 때는 len() 함수를 이용한다.
a = (1, 2, 3, 4, 5)
print(len(a))  # >> 5