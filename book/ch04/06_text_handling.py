# 4.3) 텍스트 다루기
# 파이썬 코드에서는 문자열 데이터를 작은따옴표(') 또는 큰따옴표(")의 쌍으로 텍스트를 감싸서 표현한다.
# 여러 줄로 이루어진 문자열은 작은따옴표 3개(''') 또는 큰따옴표 3개(""")의 쌍으로 텍스트를 감싸서 표현한다.

a = 'Hello, World.'
print(a)
# >>> Hello, World.

b = '안녕하세요.'
print(b)
# >>> 안녕하세요.

c = '''어서와
파이썬은
처음이지?'''
print(c)
# >>> 어서와       
# 파이썬은     
# 처음이지?

d = """Welcome to
Python."""
print(type(d))
# >>> <class 'str'>

# type() 함수로 d의 자료형을 출력하니 'str'이 출력됐다. str은 파이썬의 문자열 형식의 이름이다.
# 문자열은 파이썬의 데이터 형식인 순서열(Sequence) 형식의 한 종류이다.
# 그래서 순서열이 제공하는 기능을 문자열도 그대로 물려받아 갖고있다.
# 숫자 데이터를 다룰 때 + 연산자는 수의 합을 계산하는 기능을 가지고 있었다.
# 문자열을 다룰때에는 + 연산자가 두 문자열을 하나로 이어붙인다.
hello = 'Hello'
world = 'World'
hello_world = hello + ', ' + world
print(hello_world)
# >>> Hello, World

# 문자열 결합은 '+' 이지만 문자열 분리는 '[]'로 한다. 위 예시는 문자열 s의 0번째부터 4번째 문자 앞까지를 분리한다.
# 이렇게 문자열의 일부를 분리해내는 것을 '슬라이싱(Slicing)' 이라고 하며 슬라이싱은 문자열뿐 아니라 다른 순서열 자료형에서도 사용이 가능하다.
# 문자열이든 순서열이든 슬라이싱을 하더라도 원본은 그대로 유지한다.

a = 'Good Morning'
b = a[0:4]
c = a[5:12]
print(a, '/', b, '/', c)
# >>> Good Morning / Good / Morning

# 슬라이싱을 좀 더 편하게 하려면 문자열의 처음부터 슬라이싱할 때 대괄호 연산자에서 첫 번째 매개수를 생략하고, 
# 마지막까지 슬라이싱 하길 원하면 두 번째 매개변수를 생략하면 된다. ex) a = 'Good Morning'
print(a[:4]) # a[0:4]와 같음
# >>>'Good'
print(a[5:]) # a[5:12]와 같음
# >>>'Morning'

# 문자열에서 특정 위치에 있는 문자를 참조하고 싶을 때는 대괄호[] 사이 사이에 첨자(Index) 번호 하나만 입력하면 된다.
a = 'Good Morning'
print(a[0])
# >>> 'G'
print(a[8])
# >>> 'n'

# in 연산자는 프로그래머가 원하는 부분이 문자열 안에 존재하는지를 확인해준다. 존재하면 True, 아니면 False의 결과를 낸다.
a = 'Good Morning'
print('Good' in a)
# >>> True
print('X' in a)
# >>> False
print('Evening' in a)
# >>> False

# 순서열에는 길이를 재는 함수 len() 이 있다. 문자열에도 사용이 가능하다.
a = 'Good Morning'
print(len(a))
# >>> 12