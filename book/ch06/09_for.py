# 6.3.2) for문
# while문은 '조건'을 가지고 실행할지를 판단한다.
# for문은 조건을 평가하는 것이 안이라 순서열을 순회하다가 '순서열의 끝에 도달'했는지를 본다.
# for 반복변수 in 순서열:
    # 코드블록
# for문에서 사용하는 순서열은 리스트, 튜플, 문자열 등 어떤 것을 사용해도 괜찮다.

# for문은 순서열의 각 원소를 처음부터 차례로 순회하면서 반복변수에 담아낸다.
# 01) for.py (예제1)
for i in (1, 2, 3):  # >> 변수 i에는 반복될 때마다 튜플 (1, 2, 3)의 요소가 차례대로 복사된다.
    print(i)         # >> 튜플의 길이는 3이므로 이 for문은 3번 반복을 수행한다.

# 위 예제 코드에서 튜플은 요소가 3개이다.
# 반복 횟수를 한 줄의 코드로 파악이 가능하다는 장점 때문에 반복 횟수가 정해져 있는 경우에는 while보다는 for를 이용해 반복문을 만든다.

# for문은 어떤 순서열이든 사용할 수 있다.
# 02) for_list.py (예제2)
for s in ['뇌를', '자극하는', '파이썬']:
    print(s)

# 문자열 예제. for문을 이용하면 문자열의 각 문자를 하나씩 순회할 수 있다.
# 03) for_string.py (예제3)
for s in '뇌를 자극하는 파이썬':
    print(s)

# 튜플이나 리스트, 문자열보다도 for문에 가장 많이 사용되는 순서열은 레인지(Range)이다.
# 레인지는 연속하는 두 수의 차이가 일정한 수열을 나타낸다.

# range() 함수에 시작값, 멈춤값, 연속하는 두 수의 차, 세가지를 매개변수로 넘기면 바로 레인지 순서열을 만들 수 있다.
# 04) range (예제4)
for i in range(0, 5, 1):  # >> 0 : 시작값, 5 : 멈춤값, 1 : 연속하는 두 수의 차
    print(i)              # >> 0 1 2 3 4
 
for i in range(0, 10, 2):
    print(i)              # >> 0 2 4 6 8
 
# range() 함수의 마지막 매개변수인 연속하는 두 수의 차는 생략할 수 있다.
# 이 매개변수를 생략하면 range() 함수는 연속하는 두수의 차를 1로 간주한다.
# 05) 매개변수 생략 (예제5)
for i in range(0, 5):     # >> 0 : 시작값, 5 : 멈춤값
    print(i)              # >> 0 1 2 3 4

# range() 함수는 멈춤값만 입력해서 호출할 수 있다.
# 06) 멈춤값만 입력 (예제6)
for i in range(4):        # >> 4 : 멈춤값
    print(i)              # >> 0 1 2 3

# for문으로 딕셔너리 요소 순회
# 07) 튜플 언패킹(예제7)
dic = {'애플' : 'www.apple.com',
       '파이썬' : 'www.python.org',
       '마이크로소프트' : 'www.microsoft.com'}
for k, v in dic.items():  # >> 튜플 언패킹을 통해 k와 c에는 각 요소의 키와 값이 할당된다. ("{0}, {1}")
    print("{0} : {1}".format(k, v))
